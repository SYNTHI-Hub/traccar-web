name: CI/CD Pipeline - Vitrine FarmsToMarket

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  HARBOR_PROJECT: synthi-ai
  IMAGE_NAME: vitrine-tracar
  KUSTOMIZE_VERSION: v5.0.3

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test & Quality Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '21'
        cache: 'npm'
        
    - name: Install dependencies
      run:  npm install --legacy-peer-deps #npm ci
      
    - name: Run ESLint
      run: npm run lint
      
   # - name: Run type checking
   #  run: npm run type-check
      
   # - name: Run tests
   #   run: npm run test
      
    - name: Build application
      run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    name: Build & Push Docker Image
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Harbor
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.HARBOR_REGISTRY }}
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Security Scan
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Harbor Registry
      run: |
        echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ secrets.HARBOR_REGISTRY }} \
          -u "${{ secrets.HARBOR_USERNAME }}" --password-stdin
          
    - name: Set image tag for scanning
      id: set-scan-tag
      run: |
        # Construire le tag basÃ© sur la branche
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        if [ "$BRANCH_NAME" = "main" ]; then
          IMAGE_TAG="${{ secrets.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}:latest"
        else
          IMAGE_TAG="${{ secrets.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}:${BRANCH_NAME}"
        fi
        echo "Image tag for scanning: $IMAGE_TAG"
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
      
    - name: Pull image for scanning
      run: |
        docker pull "${{ steps.set-scan-tag.outputs.image-tag }}"
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.set-scan-tag.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
           
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy'
      continue-on-error: true
 
  deploy-staging:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    name: Deploy to Staging
    environment: staging
    
    steps:
    - name: Checkout GitOps repo
      uses: actions/checkout@v4
      with:
        repository: SYNTHI-Hub/gitops-config
        token: ${{ secrets.GITOPS_TOKEN }}
        path: gitops
        
    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
        
    - name: Update staging image
      run: |
        cd gitops/apps/vitrine-tracar/overlays/staging
        kustomize edit set image vitrine-tracar=${{ needs.build-and-push.outputs.image-tag }}
        
    - name: Commit and push changes
      run: |
        cd gitops
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add .
        git commit -m "Update staging image to ${{ needs.build-and-push.outputs.image-tag }}"
        git push

  deploy-production:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: Deploy to Production
    environment: production
    
    steps:
    - name: Checkout GitOps repo
      uses: actions/checkout@v4
      with:
        repository: SYNTHI-Hub/gitops-config
        token: ${{ secrets.GITOPS_TOKEN }}
        path: gitops
        
    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
        
    - name: Update production image
      run: |
        cd gitops/apps/vitrine-tracar/overlays/production
        kustomize edit set image vitrine-tracar=${{ needs.build-and-push.outputs.image-tag }}
        
    - name: Commit and push changes
      run: |
        cd gitops
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add .
        git commit -m "Update production image to ${{ needs.build-and-push.outputs.image-tag }}"
        git push
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ðŸš€ **Deployment Summary**
          
          - **Image**: ${{ needs.build-and-push.outputs.image-tag }}
          - **Commit**: ${{ github.sha }}
          - **Environment**: Production
          - **Deployed by**: ${{ github.actor }}
          
          **Changes in this release:**
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
